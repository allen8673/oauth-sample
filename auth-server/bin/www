#!/usr/bin/env node

/**
 * Module dependencies.
 */
require('dotenv').config()
var app = require('../app');
var debug = require('debug')('auth-server:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

var model = require('../models');
/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {

  // init client data
  // model.client.create(
  //   {
  //     clientId: 'myClientId',
  //     clientSecret: 'myClientSecret',
  //     grants: [
  //       { grant: 'authorization_code' },
  //       { grant: 'refresh_token' }
  //     ],
  //     redirect_uris: [
  //       { uri: 'uri_1' },
  //       { uri: 'uri_2' }
  //     ]
  //   },
  //   {
  //     include: [
  //       model.client.hasmany.grant,
  //       model.client.hasmany.redirect_uri,
  //     ]
  //   })


  // model.client
  //   // .findAll()
  //   .findByPk(1)
  //   .then((client) => {
  //     console.log('client', client)

  //     model.token
  //       .findAll({ include: 'client' })
  //       // .findByPk(6)
  //       .then((token) => {
  //         // token.client_id=client.id
  //         // token.save().then(tk=>{
  //         //   console
  //         // })
  //         console.log('token', token)
  //       });

  //     model.token.create({
  //       accessToken: '123',
  //       accessTokenExpiresAt: new Date('2022/2/2'),
  //       // client: data[0]
  //       client: {
  //         clientId: 'PPP',
  //         clientSecret: '555'
  //       }
  //     },
  //       {
  //         include: [
  //           model.token.belongs.client
  //           // model.token.belongsTo(model.client, { foreignKey: 'client_id' })
  //         ]
  //       }
  //     ).then((data) => {
  //       console.log('aa')
  //     }).catch(function (err) {
  //       console.log("getAccessToken - Err: ")
  //     });
  //   });






  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
